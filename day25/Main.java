/*
Welcome to Day 25 of your Vim challenge!

TAGS & NAVIGATION - Navigate codebases like a pro with ctags!
Today's focus: Using tags for intelligent code navigation and definition jumping

New commands for today:
    - `ctags -R .` - Generate tags file recursively (in shell)
    - `:tag {name}` or `:ta {name}` - Jump to tag definition
    - `Ctrl-]` - Jump to definition of word under cursor
    - `Ctrl-t` or `:pop` - Jump back (pop tag stack)
    - `:tags` - Show tag stack history
    - `:tselect {name}` or `:ts {name}` - List all matching tags
    - `:tnext` or `:tn` - Next matching tag
    - `:tprevious` or `:tp` - Previous matching tag
    - `:tfirst` or `:tf` - First matching tag
    - `:tlast` or `:tl` - Last matching tag
    - `g]` - List tags for word under cursor (tselect)
    - `g Ctrl-]` - Jump to tag, show list if multiple matches
    - `:ptag {name}` - Preview tag in split window
    - `Ctrl-w ]` - Split window and jump to tag
    - `Ctrl-w }` - Preview tag in preview window
    - `:set tags=./tags,tags,../tags` - Configure tag file locations
    - `:tag /{pattern}` - Search for tag by regex pattern
    - `:stag {name}` - Split window and jump to tag
    - `:ltag {name}` - Use location list for tag results

Tag file generation examples:
    - `ctags -R .` - All files recursively
    - `ctags *.java` - Only Java files in current directory
    - `ctags --exclude=build --exclude=.git -R .` - Exclude directories
    - `ctags --languages=Java -R src/` - Java only in src/

Advanced tag navigation:
    - `:tag /^get` - Tags starting with "get"
    - `:tag /parse$` - Tags ending with "parse"
    - `:tag /User.*Service/` - Pattern matching
    - `:set tagstack` - Enable tag stack (default)
    - `:set previewheight=15` - Preview window size

REMINDERS - Keys from previous days:
    Day 24: Argument List - :argdo works great with tag navigation
    Day 23: Undo tree - Navigate edit history vs tag history
    Day 22: Location list - :ltag uses location list
    Day 21: Quickfix - Similar navigation patterns
    Day 20: Buffers - Tags work across all buffers
    Day 19: Custom commands - Create tag shortcuts
    Day 18: Autocommands - Auto-generate tags on save
    Day 17: Registers - Store tag patterns
    Day 16: Folding - Fold by functions found with tags
    Day 15: Command history - Reuse tag commands
    Day 14: Autocomplete - Tags enable better completion
    Day 13: Windows - Tag navigation creates new windows
    Day 12: Global commands - Process files found via tags
    Day 11: Marks - Mark important tag locations
    Day 10: Visual mode - Select method signatures
    Day 9: Text objects - Edit functions found via tags
    Day 8: Macros - Apply to methods found via tags
    Day 7: Replace - Replace across tagged functions
    Day 6: Visual mode - Select function bodies
    Day 5: Search - Find references to tagged symbols
    Day 4: Repeat - Jump to similar methods
    Day 3: Yank/paste - Copy method signatures
    Day 2: Delete/change - Refactor tagged methods
    Day 1: Movement - Navigate to different methods

Your tasks for Day 25:
1. Understand ctags and tag file generation
2. Master tag jumping and navigation
3. Use tag stack for complex navigation
4. Preview and split window tag operations
5. Create efficient tag-based workflows

Scenario: You're working on a large Java enterprise application with
hundreds of classes and need to navigate efficiently between methods,
classes, and interfaces.
*/

public class Main {
    public static void main(String[] args) {
        System.out.println("=== Vim Challenge Day 25: Tags & Navigation ===\n");

        TagNavigationDemo demo = new TagNavigationDemo();
        demo.demonstrateTagConcepts();
        demo.showTagGeneration();
        demo.showNavigationCommands();
        demo.showAdvancedFeatures();
        demo.runTagTests();
    }
}

// Sample class hierarchy for tag navigation practice
class TagNavigationDemo {
    private DatabaseManager dbManager;
    private UserService userService;
    private Logger logger;

    public TagNavigationDemo() {
        this.dbManager = new DatabaseManager();
        this.userService = new UserService();
        this.logger = new Logger();
    }

    public void demonstrateTagConcepts() {
        System.out.println("TAG CONCEPTS:");
        System.out.println("=============");
        System.out.println("Tags are index entries that map symbol names to their locations");
        System.out.println("Generated by ctags for intelligent code navigation\n");

        System.out.println("What ctags indexes:");
        System.out.println("• Classes: public class UserService");
        System.out.println("• Methods: public void processUser()");
        System.out.println("• Interfaces: public interface Processor");
        System.out.println("• Fields: private String username");
        System.out.println("• Enums: public enum Status");
        System.out.println("• Constructors: public UserService()");
        System.out.println();
    }

    public void showTagGeneration() {
        System.out.println("TAG FILE GENERATION:");
        System.out.println("===================");
        System.out.println("Basic tag generation commands:");
        System.out.println("1. ctags -R . - Generate tags for all files recursively");
        System.out.println("2. ctags *.java - Tags for Java files only");
        System.out.println("3. ctags --languages=Java -R src/ - Java only in src directory");
        System.out.println("4. ctags --exclude=build --exclude=.git -R . - Exclude directories");
        System.out.println();

        System.out.println("Tag file example entries:");
        System.out.println("UserService	UserService.java	5;\"	c");
        System.out.println("processUser	UserService.java	15;\"	m	class:UserService");
        System.out.println("main	Main.java	25;\"	m	class:Main");
        System.out.println();
    }

    public void showNavigationCommands() {
        System.out.println("NAVIGATION COMMANDS:");
        System.out.println("===================");
        System.out.println("Basic tag jumping:");
        System.out.println("• Ctrl-] - Jump to definition under cursor");
        System.out.println("• :tag UserService - Jump to UserService definition");
        System.out.println("• Ctrl-t - Jump back (pop tag stack)");
        System.out.println("• :tags - Show tag navigation history");
        System.out.println();

        System.out.println("Multiple matches:");
        System.out.println("• g] - List all tags for word under cursor");
        System.out.println("• :tselect processUser - Show all processUser matches");
        System.out.println("• :tnext - Next matching tag");
        System.out.println("• :tprev - Previous matching tag");
        System.out.println();

        System.out.println("Window operations:");
        System.out.println("• Ctrl-w ] - Split and jump to tag");
        System.out.println("• Ctrl-w } - Preview tag in preview window");
        System.out.println("• :ptag UserService - Preview tag definition");
        System.out.println("• :stag processUser - Split window and jump to tag");
        System.out.println();
    }

    public void showAdvancedFeatures() {
        System.out.println("ADVANCED TAG FEATURES:");
        System.out.println("=====================");
        System.out.println("Pattern-based tag search:");
        System.out.println("• :tag /^get - All tags starting with 'get'");
        System.out.println("• :tag /Service$ - All tags ending with 'Service'");
        System.out.println("• :tag /User.*Manager/ - Pattern matching");
        System.out.println();

        System.out.println("Configuration:");
        System.out.println("• :set tags=./tags,tags,../tags - Tag file locations");
        System.out.println("• :set tagstack - Enable tag stack (default on)");
        System.out.println("• :set previewheight=15 - Preview window height");
        System.out.println();

        System.out.println("Location list integration:");
        System.out.println("• :ltag UserService - Load matches in location list");
        System.out.println("• :lnext/:lprev - Navigate location list results");
        System.out.println();
    }

    public void runTagTests() {
        System.out.println("TAG NAVIGATION TESTS:");
        System.out.println("====================");

        TestResult result = new TestResult();

        // Test 1: Basic tag understanding
        boolean understandsBasicConcepts = testBasicTagConcepts();
        result.addTest("Basic tag concepts", understandsBasicConcepts);

        // Test 2: Navigation commands
        boolean understandsNavigation = testNavigationCommands();
        result.addTest("Navigation commands", understandsNavigation);

        // Test 3: Tag stack usage
        boolean understandsTagStack = testTagStackUsage();
        result.addTest("Tag stack usage", understandsTagStack);

        // Test 4: Advanced features
        boolean understandsAdvanced = testAdvancedFeatures();
        result.addTest("Advanced features", understandsAdvanced);

        result.displayResults();
    }

    private boolean testBasicTagConcepts() {
        // Simulate tag concept understanding
        System.out.println("✓ Understanding ctags file generation");
        System.out.println("✓ Recognizing tag file format");
        return true;
    }

    private boolean testNavigationCommands() {
        // Simulate navigation command knowledge
        System.out.println("✓ Ctrl-] for jumping to definitions");
        System.out.println("✓ Ctrl-t for jumping back");
        System.out.println("✓ :tags for viewing history");
        return true;
    }

    private boolean testTagStackUsage() {
        // Simulate tag stack understanding
        System.out.println("✓ Tag stack maintains jump history");
        System.out.println("✓ Can navigate back through tag jumps");
        return true;
    }

    private boolean testAdvancedFeatures() {
        // Simulate advanced feature knowledge
        System.out.println("✓ Pattern-based tag searches");
        System.out.println("✓ Preview window operations");
        System.out.println("✓ Location list integration");
        return true;
    }
}

// Supporting classes for tag navigation demonstration
class DatabaseManager {
    private String connectionString;

    public DatabaseManager() {
        this.connectionString = "jdbc:mysql://localhost:3306/app";
    }

    public void connect() {
        // Connection logic
        System.out.println("Database connected");
    }

    public void disconnect() {
        // Disconnection logic
        System.out.println("Database disconnected");
    }

    public void executeQuery(String query) {
        System.out.println("Executing: " + query);
    }
}

class UserService {
    private DatabaseManager database;

    public UserService() {
        this.database = new DatabaseManager();
    }

    public void processUser(String username) {
        System.out.println("Processing user: " + username);
        database.connect();
        database.executeQuery("SELECT * FROM users WHERE username = '" + username + "'");
        database.disconnect();
    }

    public User getUserById(int id) {
        return new User(id, "user" + id);
    }

    public void createUser(String username, String email) {
        System.out.println("Creating user: " + username + " (" + email + ")");
    }
}

class User {
    private int id;
    private String username;

    public User(int id, String username) {
        this.id = id;
        this.username = username;
    }

    public int getId() { return id; }
    public String getUsername() { return username; }

    public void setUsername(String username) {
        this.username = username;
    }
}

class Logger {
    public void info(String message) {
        System.out.println("[INFO] " + message);
    }

    public void error(String message) {
        System.err.println("[ERROR] " + message);
    }

    public void debug(String message) {
        System.out.println("[DEBUG] " + message);
    }
}

class TestResult {
    private int passed = 0;
    private int total = 0;

    public void addTest(String testName, boolean result) {
        total++;
        if (result) {
            passed++;
            System.out.println("✓ " + testName);
        } else {
            System.out.println("✗ " + testName);
        }
    }

    public void displayResults() {
        System.out.println("\nTEST RESULTS:");
        System.out.println("=============");
        System.out.printf("Passed: %d/%d%n", passed, total);

        if (passed == total) {
            System.out.println("\n✓ Excellent! You understand tag navigation!");
            System.out.println("Ready to navigate large codebases efficiently.");
        } else {
            System.out.printf("\n⚠ Score: %d/%d - Practice tag navigation more!%n", passed, total);
        }

        System.out.println("\nNext steps:");
        System.out.println("• Generate ctags for your projects");
        System.out.println("• Practice Ctrl-] and Ctrl-t navigation");
        System.out.println("• Use :tselect for multiple matches");
        System.out.println("• Set up automatic tag generation on save");
    }
}